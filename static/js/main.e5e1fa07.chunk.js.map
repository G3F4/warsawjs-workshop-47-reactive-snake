{"version":3,"sources":["game/GameContext.js","game/GameGrid.jsx","game/useGame.js","game/useSpaceDownEvent.js","game/useGameDirection.js","game/useGameLoop.js","game/GameMenu.js","game/Game.js","game/gameContextStateReducer.js","App.js","serviceWorker.js","index.js"],"names":["GameContext","createContext","gridSize","speed","paused","pauseGame","unpauseGame","increaseSpeed","GameGrid","fruit","snake","indexes","useMemo","Array","from","length","map","_","index","getCellClass","x","y","some","snakePart","className","key","randomIndex","n","Math","floor","random","useGame","handler","useContext","useState","setSnake","setFruit","direction","initialDirection","useRef","handleKeyDown","event","current","useEffect","document","addEventListener","removeEventListener","useGameDirection","keyCode","onTick","interval","setInterval","clearInterval","useGameLoop","snakeHead","newSnakeHead","fruitEaten","newSnake","slice","useLayoutEffect","querySelector","style","GameMenu","onClick","Game","InitialGameContextState","initGameContextState","gameContextStateReducer","state","action","type","payload","Error","App","useReducer","gameContextState","dispatchGameContextAction","useCallback","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e5e1fa07.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst GameContext = createContext({\n  gridSize: 0,\n  speed: 0,\n  paused: true,\n  pauseGame: () => {},\n  unpauseGame: () => {},\n  increaseSpeed: () => {},\n});\n\nexport default GameContext;\n","import React, { useMemo } from 'react';\nimport './GameGrid.css';\n\nexport default function GameGrid({ gridSize, fruit, snake }) {\n  const indexes = useMemo(() => Array\n    .from({ length: gridSize })\n    .map((_, index) => index), [gridSize]);\n\n  function getCellClass(x, y) {\n    if (snake.some(snakePart => snakePart.x === x && snakePart.y === y)) {\n      return 'snakeCell';\n    }\n\n    if (x === fruit.x && y === fruit.y) {\n      return 'fruitCell';\n    }\n\n    return 'gridCell';\n  }\n\n  return (\n    <div className=\"grid\">\n      {indexes.map((x) => (\n        <div className=\"gridRow\" key={x}>\n          {indexes.map((y) => (\n            <div\n              className={getCellClass(x, y)}\n              key={`${x}x${y}`}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n","import { useContext, useLayoutEffect, useState } from 'react';\nimport useGameDirection from './useGameDirection';\nimport useGameLoop from './useGameLoop';\nimport GameContext from './GameContext';\nimport useSpaceDownEvent from './useSpaceDownEvent';\n\nfunction randomIndex(n) {\n  return Math.floor(Math.random() * n);\n}\n\nexport default function useGame() {\n  const { gridSize, speed, paused, increaseSpeed, pauseGame } = useContext(GameContext);\n  const [snake, setSnake] = useState([\n    { x: gridSize / 2, y: gridSize / 2 },\n    { x: gridSize / 2, y: gridSize / 2 + 1 },\n    { x: gridSize / 2, y: gridSize / 2 + 2 },\n  ]);\n  const [fruit, setFruit] = useState({\n    x: randomIndex(gridSize),\n    y: randomIndex(gridSize),\n  });\n  const direction = useGameDirection('up');\n\n  useSpaceDownEvent(pauseGame);\n\n  function handleGameTick() {\n    if (!paused) {\n      const [snakeHead] = snake;\n      const newSnakeHead = { ...snakeHead };\n      const fruitEaten = fruit.x === newSnakeHead.x && fruit.y === newSnakeHead.y;\n\n      if (fruitEaten) {\n        setFruit({ x: randomIndex(gridSize), y: randomIndex(gridSize) });\n        increaseSpeed();\n      }\n\n      if (direction === 'up') {\n        newSnakeHead.x -= 1;\n      } else if (direction === 'down') {\n        newSnakeHead.x += 1;\n      } else if (direction === 'right') {\n        newSnakeHead.y += 1;\n      } else if (direction === 'left') {\n        newSnakeHead.y -= 1;\n      }\n\n      const newSnake = fruitEaten\n        ? [newSnakeHead, ...snake.slice(0, snake.length)]\n        : [newSnakeHead, ...snake.slice(0, snake.length - 1)];\n\n\n      setSnake(newSnake);\n    }\n  }\n\n  useGameLoop({ speed, onTick: handleGameTick });\n\n  useLayoutEffect(() => {\n    const fruitEl = document.querySelector('.fruitCell');\n    fruitEl.style = 'transition: transform 0.5s;transform: rotate3d(1, 1, 1, 360deg);';\n  }, [fruit]);\n\n  return { fruit, snake };\n}","import { useEffect } from 'react';\n\nexport default function useSpaceDownEvent(handler) {\n  useEffect(() => {\n    function handleKeyDown(event) {\n      if (event.keyCode === 32) {\n        handler();\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handler]);\n}\n","import { useEffect, useRef } from 'react';\n\nexport default function useGameDirection(initialDirection) {\n  const direction = useRef(initialDirection);\n\n  function handleKeyDown(event) {\n    if (event.key === 'ArrowUp') {\n      direction.current = 'up';\n    } else if (event.key === 'ArrowDown') {\n      direction.current = 'down';\n    } else if (event.key === 'ArrowLeft') {\n      direction.current = 'left';\n    } else if (event.key === 'ArrowRight') {\n      direction.current = 'right';\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n\n  return direction.current;\n}","import { useEffect } from 'react';\n\nexport default function useGameLoop({ onTick, speed }) {\n  useEffect(() => {\n    const interval = setInterval(onTick, speed);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [speed, onTick]);\n}\n","import React, { useContext } from 'react';\nimport GameContext from './GameContext';\nimport './GameMenu.css';\n\nexport default function GameMenu() {\n  const { unpauseGame } = useContext(GameContext);\n\n  return (\n    <div className=\"gameMenu\">\n      <div className=\"gameMenuOverlay\" />\n      <div className=\"gameMenuContent\">\n        <button onClick={unpauseGame}>PLAY</button>\n      </div>\n    </div>\n  );\n}","import GameGrid from './GameGrid';\nimport React, { useContext } from 'react';\nimport useGame from './useGame';\nimport GameContext from './GameContext';\nimport GameMenu from './GameMenu';\n\nexport default function Game() {\n  const { gridSize, paused } = useContext(GameContext);\n  const { fruit, snake } = useGame();\n\n  return (\n    <>\n      {paused && <GameMenu />}\n      <GameGrid gridSize={gridSize} fruit={fruit} snake={snake} />\n    </>\n  )\n}\n","export const InitialGameContextState = { speed: 500, paused: true };\n\nexport function initGameContextState() {\n  return InitialGameContextState;\n}\n\nexport default function gameContextStateReducer(state, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case 'increaseSpeed':\n      return {\n        ...state,\n        speed: state.speed * payload,\n      };\n    case 'pauseGame':\n      return {\n        ...state,\n        paused: true,\n      };\n    case 'unpauseGame':\n      return {\n        ...state,\n        paused: false,\n      };\n    default:\n      throw new Error(`unknown game state reducer action type: ${type}`);\n  }\n}\n","import React, { useCallback, useReducer } from 'react';\nimport GameContext from './game/GameContext';\nimport Game from './game/Game';\nimport gameContextStateReducer, { initGameContextState, InitialGameContextState } from './game/gameContextStateReducer';\n\nconst GridSize = 10;\nconst SpeedMultiplier = 0.8;\n\nfunction App() {\n  const [gameContextState, dispatchGameContextAction] = useReducer(\n    gameContextStateReducer,\n    InitialGameContextState,\n    initGameContextState,\n  );\n  const { paused, speed } = gameContextState;\n\n  const increaseSpeed = useCallback(() => {\n    dispatchGameContextAction({ type: 'increaseSpeed', payload: SpeedMultiplier });\n  }, []);\n\n  const pauseGame = useCallback(() => {\n    dispatchGameContextAction({ type: 'pauseGame' });\n  }, []);\n\n  const unpauseGame = useCallback(() => {\n    dispatchGameContextAction({ type: 'unpauseGame' });\n  }, []);\n\n  return (\n    <GameContext.Provider value={{ speed, gridSize: GridSize, paused, increaseSpeed, pauseGame, unpauseGame }}>\n      <Game/>\n    </GameContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}